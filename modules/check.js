import { getPageHtml } from './getPageHtml.js'
import getClanName from './getClanName.js'
import constMessage from "../ConstMessage.js";

const smileyCastles = [
  {name: '–ó–∞–º–æ–∫ –°—Ç—Ä–∞—Ö–∞', smiley: 'üò±'},
  {name: '–ó–∞–º–æ–∫ —Å –ü—Ä–∏–≤–∏–¥–µ–Ω–∏—è–º–∏', smiley: 'üëª'},
  {name: '–ó–∞–º–æ–∫ –°—Ç–∞–ª–∏', smiley: 'üõ°'},
  {name: '–ó–∞–º–æ–∫ –ë–µ–ª–æ–≥–æ –ö–∞–º–Ω—è', smiley: 'üíé'},
]

const stateData = {
  castles: [],
}
const times = ['02', '07', '15']

let timeMs = (str) => {
  let regex = str.match(/(\d+)\s*—á\s+(\d+)\s*–º–∏–Ω/)
  let hourMs = parseInt(regex[1]) * 3600000
  let minMs = parseInt(regex[2]) * 60000
  return hourMs + minMs
}

async function thisCastle (castle) {
  if (stateData.castles.length < 4) {
    let item = {
      name: castle.name,
      smiley: smileyCastles.find(item => item.name === castle.name),
      attackStatus: false,
      thisClan: {
        name: await getClanName(castle.thisClan),
        timeAfterAttack: null,
      },
      attackInfo: {
        name: null,
        startTime: null,
      }
    }
    stateData.castles.push(item)
    return item
  } else return stateData.castles.find(item => item.name === castle.name) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –∑–∞–º–∫–µ –∏–∑ –∫–µ—à–∞
}

export async function check(bot) {
  try {
    let data = await getPageHtml()

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–±–∏–≤–æ–≤
    // for (let loc in data.one) {
    //     let thisLoc = data.one[loc]
    //
    //     if(thisLoc.status.includes('–∞—Ç–∞–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å')) {
    //         const timeLeft = thisLoc.status.slice(25, 27)
    //
    //         if(times.includes(timeLeft)) {
    //             bot.telegram.sendMessage(-1001913180942,
    //             `<b>${thisLoc.name}</b>\n`+
    //             `–î–æ –∞—Ç–∞–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å –≥–¥–µ-—Ç–æ ${timeLeft} –º–∏–Ω`, {
    //                 parse_mode: 'HTML'
    //             })
    //         }
    //     } else if(thisLoc.status.includes('–ü—Ä–∏–µ–º –∑–∞—è–≤–æ–∫')) {
    //         bot.telegram.sendMessage(-1001913180942,
    //         `<b>${thisLoc.name}</b>\n`+
    //         `–°–±–æ—Ä –∑–∞—è–≤–æ–∫ –Ω–∞ –∞—Ç–∞–∫—É - <b>–ñ–ú–Ø–ö–ê–ï–ú</b>`, {
    //             parse_mode: 'HTML'
    //         })
    //     }
    // }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞—Ü–∏–π —Å –º–æ–Ω—Å—Ç—Ä–∞–º–∏
    // for (let loc in data.two) {
    //     let thisLoc = data.two[loc]
    //     if(thisLoc.status == 'mobs') {
    //         bot.telegram.sendMessage(-1001913180942,
    //             `<b>${thisLoc.name}</b>\n`+
    //             `–õ–æ–∫–∞—Ü–∏—è –∑–∞–Ω—è—Ç–∞ –º–æ–Ω—Å—Ç—Ä–∞–º–∏`, {
    //             parse_mode: 'HTML'
    //         })
    //     } else if(thisLoc.status) {
    //         const timeLeft = thisLoc.status.timeLeft.slice(25, 27)
    //
    //         if(times.includes(timeLeft) || timeLeft == '14') {
    //             bot.telegram.sendMessage(-1001913180942,
    //             `<b>${thisLoc.name}</b>\n`+
    //             `–î–æ –∞—Ç–∞–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å –≥–¥–µ-—Ç–æ ${timeLeft} –º–∏–Ω`, {
    //                 parse_mode: 'HTML'
    //             })
    //         }
    //     }
    // }

    console.log('************* –õ–æ–≥–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–∏ *****************')
    for (let castle of data.castles) {
      let castleState = await thisCastle(castle)
      let castleNameSmiley = `${castleState.smiley.smiley}<b>${castle.name}</b>${castleState.smiley.smiley}`

      switch (castle.attackInfo.attack) {
        case "preAttack": // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞—Ç–∞–∫–∏
          console.log('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç–∞–∫–µ: ' + castle.name)

          if (castle.attackInfo.time.indexOf('04') !== -1) {
            castleState.attackInfo.startTime = new Date()
            castleState.attackInfo.name = await getClanName(castle.attackInfo.attackClan)
            await constMessage
              .sendMessage(bot, await constMessage
                .preAttack(castle, castleNameSmiley))

          } else if(castle.attackInfo.time.indexOf('01') !== -1)
            await constMessage
              .sendMessage(bot, await constMessage
                .preAttack(castle, castleNameSmiley))
          break
        case "attack": // –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∞—Ç–∞–∫–µ
          if (!castleState.attackStatus) { // –ï—Å–ª–∏ —à—Ç—É—Ä–º–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –µ–µ –Ω–∞—á–∞–ª–µ
            console.log('–®—Ç—É—Ä–º–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –µ–µ –Ω–∞—á–∞–ª–µ: ' + castle.name)
            castleState.attackStatus = true // –°—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ–π –∞—Ç–∞–∫–∏
            await constMessage
              .sendMessage(bot, await constMessage
                .startAttack(castle, castleNameSmiley))
          } else console.log('–ò–¥–µ—Ç –∞—Ç–∞–∫–∞: ' + castle.name)
          break
        case "noAttack": // –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ç–∞–∫–∏
          if (castle.attackInfo.time === '00 —á 00 –º–∏–Ω') { // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—Ç–∞–∫–∏
            console.log('–ó–∞–º–æ–∫ –∑–∞—Ö–≤–∞—Ç–∏–ª–∏: ' + castle.name)

            castleState.thisClan.name = await getClanName(castle.thisClan)
            castleState.attackStatus = false
            castleState.attackInfo.startTime = null
            await constMessage
              .sendMessage(bot, await constMessage
                .successAttack(castle, castleNameSmiley))
          } else {
            if (castleState.thisClan.timeAfterAttack && castleState.attackInfo.startTime) { // –û—Ç–±–∏–ª–∏ —à—Ç—É—Ä–º
              let difference = new Date() - castleState.attackInfo.startTime
              let lastTime = timeMs(castleState.thisClan.timeAfterAttack)
              let lastTimeDif = lastTime + difference
              let newTime = timeMs(castle.attackInfo.time)

              if (lastTimeDif >= (newTime - 60000) || lastTimeDif <= (newTime + 60000)) {
                castleState.attackStatus = false
                castleState.attackInfo.name = null
                castleState.attackInfo.startTime = null
                castleState.thisClan.timeAfterAttack = castle.attackInfo.time
                await constMessage
                  .sendMessage(bot, await constMessage
                    .notSuccessAttack(castle, castleNameSmiley, castleState))
              }
            } else { // –ö–æ–≥–¥–∞ –Ω–µ—Ç –∞—Ç–∞–∫–∏ –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
              castleState.thisClan.timeAfterAttack = castle.attackInfo.time
              console.log('–ê—Ç–∞–∫–∏ –Ω–µ—Ç: ' + castle.name)
            }
          }
          break
      }
    }
    console.log('*************************************')
  } catch (e) {
    throw e
  }
}
